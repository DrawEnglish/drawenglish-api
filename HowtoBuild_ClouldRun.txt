빌드(Build) : 소스 코드를 실행 가능한 형태로 변환하는 작업 (예: Docker 이미지 생성, 컴파일 등)
배포(Deploy) : 빌드된 결과물을 서버에 올려 실제 서비스를 시작하는 작업 (예: Cloud Run에 배포)
CI(Continuous Integration) : 자주 커밋 + 자동 빌드 & 테스트
CD(Continuous Delivery or Deployment) : 자동 배포 흐름 (스테이징 or 운영까지)
CI/CD 자동배포 : 코드만 push하면 자동으로 운영 반영

◎ Google Cloud Run 관련 주요 링크
- GCP 콘솔 메인 : https://console.cloud.google.com
- 프로젝트 ID 리스트 : https://console.cloud.google.com/projectselector2/home/dashboard
- 내 결재계정(billing Account) 설정 : https://console.cloud.google.com/billing
- 빌드 기록 : https://console.cloud.google.com/cloud-build/builds?inv=1&invt=AbxGPg&project=drawenglish-api
- Cloud Run 서비스 보기 : https://console.cloud.google.com/run
  해당 서비스 누르고 '로그'를 누르면 해당 서비스에 대한 로그를 볼 수 있다.
- Cloud Build : https://console.cloud.google.com/cloud-build
- Cloud Build - 트리거 : https://console.cloud.google.com/cloud-build/triggers
- Secret manager : https://console.cloud.google.com → 햄버거메뉴 → 보안 → Secret Manager
- Cloud Run : https://console.cloud.google.com/run




■ Dockerfile 작성
------------------
루트 폴더로 이동
cd C:/drawenglish-api

아래 내용으로 Dockerfile을 생성

----------

FROM python:3.11-slim

# 1. 작업 디렉토리 설정
WORKDIR /code

# 2. 의존성 설치
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 4. 애플리케이션 코드 복사
COPY . .

# 5. FastAPI 실행
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]

-----------

■ .dockerignore 파일 작성
루트 폴더로 이동
cd C:/drawenglish-api

아래 내용으로 .dockerignore을 생성

-------------------------
# Python
__pycache__/
*.pyc
*.pyo
*.pyd

# 테스트
tests/
*.log

# 에디터 관련
.vscode/
.idea/
*.swp

# 시스템 파일
.DS_Store
Thumbs.db

# Git
.git
.gitignore
--------------------------


■ Google Cloud SDK (gcloud) 설치
----------------------------------
gcloud --version
위 명령으로 설치 유무 확인 : 설치 안되있을때 내부 또는 외부 명령, 실행가능 명령이 아니라함.


https://cloud.google.com/sdk/docs/install
위 사이트로 들어가 프로그램 다운로드 후 설치
- "PATH에 추가" 체크
- "gcloud CLI 시작 시 자동 업데이트 허용" 선택 가능

☞ 처음 설치하여 Project ID가 없을때
Pick cloud project to use:
 [1] serenamarang-4552O2-s5
 [2] Enter a project ID
 [3] Create a new project

☞ Project ID drawenglish-api를 이미 만들었을 때
Pick cloud project to use:
 [1] drawenglish-api
 [2] serene-anagram-455202-s5
 [3] Enter a project ID
 [4] Create a new project
Please enter numeric choice or text value (must exactly match list item):


[3] 선택 후 프로젝트 이름 입력 : drawenglish-api
또는 
빠져나온 후 명령창에서 : gcloud projects create drawenglish-api

생성되면 아래 명령어로 Project ID 선택:
gcloud config set project drawenglish-api

프로젝트 설정 끝나면 다음 단계:
gcloud services enable run.googleapis.com
→ 이 명령은 Cloud Run 기능을 활성화하는 거야 (필수)

☞ GCP 프로젝트는 생성됐지만 결제 계정(Billing Account)이 연결되지 않으면
Cloud Run을 쓸 수 없음.(아래 메시지 출력됨)
-----------
C:\Program Files (x86)\Google\Cloud SDK>gcloud services enable run.googleapis.com
ERROR: (gcloud.services.enable) FAILED_PRECONDITION: Billing account for project '614338445338' is not found. Billing must be enabled for activation of service(s) 'run.googleapis.com,artifactregistry.googleapis.com,containerregistry.googleapis.com' to proceed.
Help Token: AT3scP4S_37TNWTr6Zri2gpZqBJ-QZerCLnIWDxPOjR3c4UWoIl8me8HkZRKotWaM9GhKpRguyXOi2NnPh03Hc0eFaiw0tugo_RU9V65suij-Nrd
- '@type': type.googleapis.com/google.rpc.PreconditionFailure
  violations:
  - subject: ?error_code=390001&project=614338445338&services=run.googleapis.com&services=artifactregistry.googleapis.com&services=containerregistry.googleapis.com
    type: googleapis.com/billing-enabled
- '@type': type.googleapis.com/google.rpc.ErrorInfo
  domain: serviceusage.googleapis.com/billing-enabled
  metadata:
    project: '614338445338'
    services: run.googleapis.com,artifactregistry.googleapis.com,containerregistry.googleapis.com
  reason: UREQ_PROJECT_BILLING_NOT_FOUND
-----------

해결 방법: 결제 계정 연결 (무료 티어 가능!)
아래 링크로 이동:
https://console.cloud.google.com/billing
결제 계정이 없다면 먼저 생성
결제 계정이 이미 있다면:
왼쪽 메뉴에서 프로젝트 연결 또는
상단에서 프로젝트 선택 → drawenglish-api 선택
그 후 "결제 계정 연결"을 찾아서 기존 계정 연결

1. "내 결제 계정" 글자 클릭
→ 그러면 결제 계정 연결 마법사가 열릴 거야.
2. 기존 결제 계정 선택 (예: 0169E7-CE9BF1-7220B7)
→ 그리고 “연결” 버튼 클릭
3. 연결되면 “결제 계정” 열에 결제 계정 이름이 표시되고 더 이상 오류 안 남

왼쪽 상단 메뉴에서 결제 계정 관리 클릭
또는 여기 바로가기 https://console.cloud.google.com/billing
사용 중인 결제 계정을 클릭
(예: 0169E7-CE9BF1-7220B7)
왼쪽 메뉴에서 프로젝트 연결 또는 연결된 프로젝트
프로젝트 연결 또는 연결 수정 클릭
drawenglish-api 프로젝트 선택 후 연결

※참고: 결제는 실제로 돈 나가지 않아도 돼
GCP는 신규 사용자에게 무료 크레딧을 줘요 (보통 $300)
Cloud Run은 월 2백만 요청 + 360,000초 무료 제공
개인 개발 테스트 수준에선 요금 거의 안 나와요

연결이 완료되면 다시 아래 명령어 실행:
gcloud services enable run.googleapis.com
☞ Operation "operations/acf.p2-614338445338-d855f9d9-8230-4e11-bf1b-dd6eeb8977f6" finished successfully. 나오면 성공


■ 빌드 - 로컬 PC에서 
-----------------------------

프로젝트 폴더로 이동해서
cd C:/drawenglish-api 

아래 명령어 실행
gcloud run deploy drawenglish-api --source . --region us-central1 --platform managed --allow-unauthenticated

drawenglish-api: 서비스 이름 (마음에 드는 다른 이름으로 바꿔도 돼)
--source .: 현재 디렉토리에 있는 Dockerfile 기준으로 빌드
--region us-central1
--allow-unauthenticated: 외부 공개 API로 만들기 (GPT에서 접근 가능하게)

※빌드 실패/성공시 콘솔에 로그를 볼수 있는 링크를 띄워준다
  예) https://console.cloud.google.com/cloud-build/builds;region=us-central1
  /0630485b-cecf-48e0-acc7-e0cc6ed9d8a8?project=614338445338
  - 이 링크는 '빌드 기록' - 해당 빌드를 선택하면 보여주는 '빌드 세부정보'임

★ 로컬 PC에서의 빌드는 .env 파일도 올라가니 API Key를 저장한 경우에는 주의해야함.
   그래서 GCP에선 보통 .env 파일 대신 환경 변수 설정이나 Secret Manager를 권장합니다.
   - 환경 변수 설정 (Cloud Run / App Engine) : gcloud run deploy --set-env-vars 또는 콘솔에서 설정
   - Secret Manager 사용 : API키를 GCP Secret Manager에 저장하고 Cloud Run 서비스에서 '비밀 참조'로 환경 변수처럼 사용
   ♥♥♥ 추가로 알아보고 작성해야 하는 사항
※ 아래 명령은 웹에서 환경변수의 이름/값을 CLI를 통해 설정/저장하는 명령
gcloud run services update drawenglish-api --update-env-vars OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxx

※ 아래와 같은 코드 있으면 빌드 안됨 ???(확인 안된 사항)
# 아래 부분 주석처리 또는 삭제
# if __name__ == "__main__":
#     test("They elected him president.")
#     ...

※ 빌드 명령어 두가지
1. gcloud run deploy
   CaaS (Container as a Service) 방식
   FastAPI, Flask + AI 모델, WebSocket 등 고유한 환경 필요하다 → gcloud run deploy
2. gcloud app deploy
   PaaS (Platform as a Service) 방식
   빠르게 웹서비스 빌드하고 싶다 → gcloud app deploy



■ 빌드 - GitHub를 통해 
-------------------------------
◎ GitHub → Cloud Run 빌드/배포 기본 흐름
1) GitHub에 프로젝트 업로드
  .gitignore 잘 설정 (민감 정보 제외)
2) Google Cloud Build를 GitHub와 연동
  Cloud Console에서 클릭 몇 번으로 가능
3) Cloud Build 트리거 생성
  특정 브랜치나 커밋 발생 시 Cloud Run으로 자동 빌드/배포
4) Cloud Build 설정 파일(cloudbuild.yaml) 작성
  Dockerfile로 이미지 빌드 후 Cloud Run에 배포 명령 포함
★ 민감정보 .env 등은 절대 GitHub에 올리지 않고
   Cloud Build 환경변수나 Secret Manager로 안전하게 삽입.

▷ GitHub 리포지토리 생성 : Render방식 참고

▷ Git 초기화, 원격저장소 생성, 커밋, 푸시
git init
git remote add origin https://github.com/drawenglish/drawenglish-api.git
git add .
git commit -m "초기 커밋"
git push -u origin main

▷ GCP에서 Cloud Build 연동(트리거 설정)
Google Cloud Console → Cloud Build > 트리거 접속(아래 링크)
https://console.cloud.google.com/cloud-build/triggers

▷ 트리거 만들기 
이름: github-auto-deploy
리전 : us-central1(아이오와) 선택
이벤트: 브랜치로 푸시 / "푸시될 때" (push to branch)
소스 저장소 생성 : 1세대
소스 저장소: drawenglish/drawenglish-api 선택 (GitHub 선택 후 GitHub 계정 연결)
브랜치: main
구성 - 유형: Cloud Build 구성 파일(yaml 또는 json) 선택
위치 - 저장소: DrawEnglish/drawenglish-api (GitHub 앱) / 루트 디렉터리 (cloudbuild.yaml 파일이 필요)
 * Cloud Build 구성 파일 위치 : /cloudbuild.yaml
   (Git 저장소 내의 Cloud Build 구성 파일 경로를 지정)
GitHub에 빌드 로그 전송 체크 ???
서비스 계정 : 614338445338-compute@developer.gserviceaccount.com 선택

▷ cloudbuild.yaml 파일 만들기
프로젝트 루트에 cloudbuild.yaml 파일을 아래 내용으로 생성
-----------------------------------------------------------------------
steps:
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/drawenglish-api', '.']
    secretEnv: ['OPENAI_API_KEY']   # Secret Manager 관련 설정 부분

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/drawenglish-api']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - drawenglish-api
      - --image
      - gcr.io/$PROJECT_ID/drawenglish-api
      - --region
      - asia-northeast3
      - --platform
      - managed
      - --allow-unauthenticated
      - --set-env-vars                 # 이 2줄은 Secret Manager 관련 설정 부분
      - OPENAI_API_KEY=OPENAI_API_KEY  # 이 줄은 .env 안 쓰는 방식

availableSecrets:  # Secret Manager에 API Key 저장 설정 부분
  secretManager:
    - versionName: projects/614338445338/secrets/OPENAI_API_KEY/versions/latest
      env: 'OPENAI_API_KEY'

images:
  - 'gcr.io/$PROJECT_ID/drawenglish-api'

options:
  logging: CLOUD_LOGGING_ONLY  # 이 부분이 없어도 빌드 안될 수 있음
  machineType: 'E2_HIGHCPU_8'
  dynamic_substitutions: true

timeout: 600s  # 지정하지 않을때의 기본값이 600초임
-----------------------------------------------------------------------
※ 614338445338는 Project ID임


★ 위 소스에서 주석처리된 부분이 Secret Manager(API 키관리) 관련 설정 부분임

▷ 웹페이지에서 해주어야하는 부분
https://console.cloud.google.com → 햄버거메뉴 → 보안 → Secret Manager 접속
Secret Manager API - '사용' 클릭
- 보안비밀(Secret) 만들기 버튼 클릭
- 이름: OPENAI_API_KEY
- 보안 비밀 값: sk-... (실제 OpenAI API 키 입력)
- 버전 자동 생성을 체크한 상태로 "만들기"


▷ 빌드/배포 테스트
git add cloudbuild.yaml
git commit -m "add cloudbuild.yaml for auto deployment"
git push
☞ 푸시하면 Cloud Build 트리거가 작동하면서 자동으로 Cloud Run에 빌드/배포됩니다!


▷ 빌드 결과 및 로그 확인
https://console.cloud.google.com/cloud-build/builds 를 통해 성공 여부 및 로그 확인
- 빌드를 누르면 단계별(Build, Push, Deploy) 세부 로그 확인 가능
- 성공했다면 로그 맨 아래에 Cloud Run URL이 표시됨
  Service URL:  https://drawenglish-api-614338445338.asia-northeast3.run.app  
  ☞ 실제 접속은  https://drawenglish-api-614338445338.asia-northeast3.run.app/docs 가 가능

▷ 트리거의 리전 선택에 따라 빌드가 안될 수 있음.
 - failed precondition: due to quota restrictions, cannot run builds in this region와 같은 에러가 남.
 - 자동 빌드가 가능한 트리거 리전 : global 또는 us-central1로 설정


▷ 배포 지점(서버) 확인
----------------------------------
1) CLI 명령

-gcloud CLI에서 gcloud run services list만으로 확인
gcloud run services list --platform=managed 또는 그냥 gcloud run services list

-JSON으로 정확한 정보 확인
gcloud run services list --platform=managed --format=json

2) 웹콘솔
https://console.cloud.google.com/run → 서비스 에서 확인 가능
 * 리스트가 아주 많은 경우 필터 설정 가능 : 예) 필터 : 리전 asia-northeast3


▷ 배포 지점(서버) 내용 삭제
-----------------------------




▷ 주의: "IAM Policy failed" 경고
-----------------------------------
Cloud Run을 **공개 URL로 접근 가능하게 만드는 권한 설정(roles/run.invoker)**이 실패했습니다.
따라서 지금은 외부 사용자가 이 URL에 접근할 수 없을 가능성이 높습니다 (403 에러 날 수 있어요)
다음 명령어를 실행하면 Cloud Run을 공개로 전환할 수 있습니다:

---------------------------------------------------------------
gcloud run services add-iam-policy-binding drawenglish-api ^
  --region=asia-northeast3 ^
  --member="allUsers" ^
  --role="roles/run.invoker"
---------------------------------------------------------------
Updated IAM policy for service [drawenglish-api].
bindings:
- members:
  - allUsers
  role: roles/run.invoker
etag: BwY03WcCUT0=
version: 1





▷ 글로벌 사용자 대응(배포 서버를 여러개로 서비스)이 필요하면 <<<< 차후 정리할 것 >>>
GCP의 Cloud Load Balancer + 멀티 리전 Cloud Run이 가장 실전적이고 효과적인 방법입니다.
사용자는 어디에서 오든 가장 가까운 서버로 자동 연결됩니다.
참고: Cloud Run 자체는 리전별로 분리된 단일 서비스입니다
즉, Cloud Run에는 멀티 리전 자동 분산 기능은 없고, 외부에서 분산 트래픽 처리를 해줘야 합니다.





gcp_openapi.json 파일 servers - url 변경해야함.
"url": "https://api.drawenglish.com" 




gcloud run services add-iam-policy-binding drawenglish-api ^
  --region=us-central ^
  --member="allUsers" ^
  --role="roles/run.invoker"


us-central1









■ Google Cloud Run에서 API 키관리
----------------------------------
1) 로컬을 위한 세팅
c:\drawenglish-api 폴더에 .env 파일 생성 아래 입력하고 저장
OPENAI_API_KEY=키값

▷ github에 저장 안되게 하기
.env는 절대 GitHub에 업로드 하면 안됨(하려고 해도 경고/에러 메시지 남)
c:\drawenglish-api 폴더에 .gitignore 파일 생성하고 아래 입력하고 저장
.env
__pycache__/
*.pyc
※ 이로인해 .env가 업로드 되는 것을 방지한다.

▷ 로컬PC에서 GCP로 배소시 업로드 안되게 하기
.dockerignore 파일안에 아래 두줄 넣기 
.env
*.env


2) Render에 OpenAI 키 등록하기(Render에서 환경변수 설정)
Render에 로그인 후 배포한 서비스(Project) 선택(예: drawenglish-api)
상단 탭에서 “Environment” 또는 “Environment Variables” 클릭
Key에 → OPENAI_API_KEY
Value에 → sk-xxxxxxxxxxxxxx 키 값 입력
저장 (자동 적용됨)
 ※ 그럼 서버가 재시작될 때 이 환경변수가 자동으로 적용돼!








==================================================================





■■■ GPTs가 외부 API를 이용할때 접근 '허용'을 매번 물어보는거 없애는 방법

■ 신뢰된 도메인으로 미리 등록하기 (GPT 개발자 대상) / 이건 되는지 확인 안됨.
- openapi.yaml[json]에 사용하는 서버 URL이 HTTPS여야 함 (예: https://yourapi.com)
- API 서버의 CORS 정책이 설정되어 있어야 함
- OpenAI 측에서 내부적으로 자동 허용 가능한 도메인 리스트에 올라 있어야 함 (대부분의 상용 도메인은 가능)





















GPTs가 외부 API를 이용할때 접근 '허용'을 매번 물어보는거 없애는 방법

출력결과 이탤릭으로 나오는거






